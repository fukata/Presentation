#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use autodie;

use Data::Dumper;
use Cwd;
use FindBin;
use File::Copy::Recursive qw/rcopy/;
use Text::Markdown 'markdown';
use Template;
use JSON::XS;

open(my $datafile, "<", "main.txt"); 

my $root = $FindBin::RealBin;
my $export = Cwd::getcwd();
my $config = {
	delimiter => ">-----",
	theme => "default",
};
my $html = '';
my $title = undef;
$config->{theme} = $ARGV[0] unless $ARGV[0];

sub load_config {
	if (-f "$export/config.json") {
		open(my $configfile, "<", "config.json"); 
		local $/ = undef;
		my $_config = JSON::XS->new->utf8->decode(<$configfile>);
		$config = {%$config, %$_config};
	}
}

sub to_html {
	my $buf = shift;
	my $h = markdown($buf);
	return "\n<div class=\"contents\">\n$h</div>";
}

sub load_index {
	my ($theme, $title, $html) = @_;
	my $tt = Template->new({
		INCLUDE_PATH => "$root/themes/",
	});
	my $result = '';
	$tt->process("$theme/index.tt", {title=>$title, html=>$html}, \$result);
	return $result;
}

load_config();

my $buf = undef;
while (my $line = <$datafile>){
	chomp($line);
	unless ($title) {
		$title = $line;
		next;
	}

	if ($line eq $config->{delimiter}) {
		next unless $buf;
		$html .= to_html($buf);
		$buf = undef;
	} else {
		$buf .= "\n$line";
	}
}
$html .= to_html($buf) if $buf;
close($datafile);

# index.html
open(my $out, ">", "$export/index.html");
print $out load_index($config->{theme}, $title, $html);
close($out);

# css and js
rcopy("$root/themes/$config->{theme}/assets", "$export/assets");

